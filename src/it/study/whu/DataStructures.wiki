#summary 算法与数据结构小结
<wiki:toc max_depth="4" />
=算法与数据结构小结=

==概述==
本科阶段学习数据结构与算法主要是受高中NOIP、NOI以及大学ACM等比赛的影响。
另一方面，感觉这些东西能够激发自己的兴趣爱好，何乐而不为呢？

在大一下学期时，我立下了一个目标: 争取认真阅读《算法导论》并力争完成所有的课后题。
现在翻看过去的笔记，已经是多少年以前的事情了。
至此，我准备借着复习之际将当时的笔记与现在的体会放在这个Wiki上面。

==算法导论==
===第一部分 基础知识===
====分析基础====
利用渐进分析技术对具体算法的时间复杂度进行分析。

====基本设计方法====
=====分而治之=====
在算法结构上主要呈递归模式: 为了解决一个给定的问题，算法要一次或多次地递归调用其自身来解决相关的子问题。

分治策略: 将原文题划分成n个规模较小而结构与原问题相似的子问题；递归地解决这些子问题，然后再合并其结果，就得到原问题的解。

每一层递归上的基本步骤:
  # 分解，将原问题分解成一系列子问题
  # 解决，递归地解各个子问题。若子问题足够小，则直接求解
  # 合并，将子问题的结果合并成原问题的解

====随机分析和随机算法====
在算法中添加随机处理技术，将固有的问题做随机化处理，使其能够有效地呈现出一般趋势。


===第二部分 排序和顺序统计学===

====O(n^2^)排序方法====

=====插入排序=====
{{{
#A[1..length]
INSERTION-SORT(A)
  for j <- 2 to length[A]
  do
    key <- A[j]
    i <- j - 1
    while i>0 and A[i]>key
    do
      A[i+1] <- A[i]
      i <- i - 1
    A[i+1] <- key
}}}

=====冒泡排序=====
{{{
#A[1..length]
BUBBLE-SORT(A)
  #注意边界
  for j <- 1 to length[A]
  do
    for i <- length[A] downto j+1
    do
      if A[i]<A[i-1]
      then
        A[i-1] <-> A[i]
}}}

=====选择排序=====
=====希尔排序=====

====O(nlog(n))排序方法====

=====归并排序=====
=====堆排序=====
=====快速排序=====
